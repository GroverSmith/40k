// Google Apps Script for Army List Form Submissions
// Deploy this as a web app to handle form submissions

// Configuration - UPDATE THESE VALUES
const SPREADSHEET_ID = '1f_tnBT7tNLc4HtJpcOclg829vg0hahYayXcuIBcPrXE';
const SHEET_NAME = 'Army Lists'; // Name of the sheet tab for army lists

function doPost(e) {
  try {
    // Log the incoming request for debugging
    console.log('Received POST request:', e.postData.contents);
    
    // Parse the JSON data from the form
    const data = JSON.parse(e.postData.contents);
    
    // Validate required fields
    if (!data.userName || !data.forceName || !data.armyName || !data.armyListText) {
      throw new Error('Missing required fields: userName, forceName, armyName, or armyListText');
    }
    
    // Open the spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    let sheet = spreadsheet.getSheetByName(SHEET_NAME);
    
    // Create the sheet if it doesn't exist
    if (!sheet) {
      sheet = spreadsheet.insertSheet(SHEET_NAME);
      
      // Add header row
      const headers = [
        'Timestamp',
        'User Name',
        'Force Name', 
        'Army Name',
        'Faction',
        'Detachment',
        'MFM Version',
        'Points Value',
        'Notes',
        'Army List Text'
      ];
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      
      // Format header row
      const headerRange = sheet.getRange(1, 1, 1, headers.length);
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#4ecdc4');
      headerRange.setFontColor('#ffffff');
      
      // Set column widths
      sheet.setColumnWidth(1, 150); // Timestamp
      sheet.setColumnWidth(2, 150); // User Name
      sheet.setColumnWidth(3, 200); // Force Name
      sheet.setColumnWidth(4, 200); // Army Name
      sheet.setColumnWidth(5, 120); // Faction
      sheet.setColumnWidth(6, 120); // Detachment
      sheet.setColumnWidth(7, 100); // MFM Version
      sheet.setColumnWidth(8, 100); // Points Value
      sheet.setColumnWidth(9, 300); // Notes
      sheet.setColumnWidth(10, 400); // Army List Text (will auto-expand)
      
      console.log('Created new sheet:', SHEET_NAME);
    }
    
    // Prepare the row data
    const rowData = [
      new Date(data.timestamp),    // Timestamp
      data.userName,               // User Name
      data.forceName,              // Force Name
      data.armyName,               // Army Name
      data.faction || '',          // Faction
      data.detachment || '',       // Detachment
      data.mfmVersion || '',       // MFM Version
      data.pointsValue || '',      // Points Value
      data.notes || '',            // Notes
      data.armyListText            // Army List Text
    ];
    
    // Find the next empty row and append the data
    const lastRow = sheet.getLastRow();
    const newRowNumber = lastRow + 1;
    
    // Insert the data
    sheet.getRange(newRowNumber, 1, 1, rowData.length).setValues([rowData]);
    
    // Format the new row
    const newRowRange = sheet.getRange(newRowNumber, 1, 1, rowData.length);
    
    // Format timestamp column
    sheet.getRange(newRowNumber, 1).setNumberFormat('yyyy-mm-dd hh:mm:ss');
    
    // Format points column as number
    if (data.pointsValue) {
      sheet.getRange(newRowNumber, 8).setNumberFormat('#,##0');
    }
    
    // Set text wrapping for notes and army list text columns
    sheet.getRange(newRowNumber, 9).setWrap(true);  // Notes
    sheet.getRange(newRowNumber, 10).setWrap(true); // Army List Text
    
    // Auto-resize row height to fit content
    sheet.autoResizeRows(newRowNumber, 1);
    
    // Log success
    console.log('Successfully added army list:', data.armyName, 'for force:', data.forceName);
    
    // Return success response with CORS headers
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: 'Army list submitted successfully',
        rowNumber: newRowNumber,
        timestamp: data.timestamp
      }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
      
  } catch (error) {
    // Log the error
    console.error('Error processing army list submission:', error);
    
    // Return error response with CORS headers
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        error: error.message || 'Unknown error occurred'
      }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
  }
}

function doGet(e) {
  // Handle GET requests with multiple actions
  try {
    const action = e.parameter.action || 'list';
    
    let response;
    switch(action) {
      case 'list':
        response = getArmyLists(e.parameter);
        break;
      case 'get':
        response = getArmyListById(e.parameter.id);
        break;
      case 'test':
        response = getRecentArmyLists(); // The original test functionality
        break;
      default:
        response = getArmyLists(e.parameter);
    }
    
    // Add CORS headers to the response
    return response.setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
    
  } catch (error) {
    console.error('Error handling GET request:', error);
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        error: error.message
      }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
  }
}

// Add OPTIONS method handler for CORS preflight requests
function doOptions(e) {
  return ContentService
    .createTextOutput('')
    .setMimeType(ContentService.MimeType.TEXT)
    .setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
      'Access-Control-Max-Age': '3600'
    });
}

function getArmyLists(params = {}) {
  // Get army lists with optional filtering
  const { force, limit, offset } = params;
  
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  
  if (!sheet) {
    throw new Error('Army Lists sheet not found');
  }
  
  // Get all data
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  let rows = data.slice(1);
  
  // Filter by force name if specified (Force Name is now column 2, index 2)
  if (force) {
    rows = rows.filter(row => 
      row[2] && row[2].toString().toLowerCase().trim() === force.toLowerCase().trim()
    );
  }
  
  // Apply pagination if specified
  const startIndex = parseInt(offset) || 0;
  const maxResults = parseInt(limit) || rows.length;
  const paginatedRows = rows.slice(startIndex, startIndex + maxResults);
  
  // Convert to objects
  const armyLists = paginatedRows.map((row, index) => {
    const obj = { id: startIndex + index + 2 }; // +2 because of header row and 0-based index
    headers.forEach((header, headerIndex) => {
      obj[header] = row[headerIndex];
    });
    return obj;
  });
  
  return ContentService
    .createTextOutput(JSON.stringify({
      success: true,
      count: armyLists.length,
      totalCount: rows.length,
      data: armyLists,
      hasMore: startIndex + maxResults < rows.length
    }))
    .setMimeType(ContentService.MimeType.JSON);
}

function getArmyListById(id) {
  // Get a specific army list by row ID
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  
  if (!sheet) {
    throw new Error('Army Lists sheet not found');
  }
  
  const rowNumber = parseInt(id);
  if (!rowNumber || rowNumber < 2) {
    throw new Error('Invalid army list ID');
  }
  
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const rowData = sheet.getRange(rowNumber, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  if (!rowData || rowData.every(cell => !cell)) {
    throw new Error('Army list not found');
  }
  
  // Convert to object
  const armyList = { id: rowNumber };
  headers.forEach((header, index) => {
    armyList[header] = rowData[index];
  });
  
  return ContentService
    .createTextOutput(JSON.stringify({
      success: true,
      data: armyList
    }))
    .setMimeType(ContentService.MimeType.JSON);
}

function getRecentArmyLists() {
  // Original functionality for testing - get recent entries
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  
  if (!sheet) {
    return ContentService
      .createTextOutput(JSON.stringify({
        error: 'Army Lists sheet not found'
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  
  // Get all data (limit to recent entries for testing)
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1, 11); // Get last 10 entries for testing
  
  const result = rows.map(row => {
    const obj = {};
    headers.forEach((header, index) => {
      obj[header] = row[index];
    });
    return obj;
  });
  
  return ContentService
    .createTextOutput(JSON.stringify({
      success: true,
      count: result.length,
      data: result,
      message: 'Recent army lists (test mode)'
    }))
    .setMimeType(ContentService.MimeType.JSON);
}

// Utility function to test the script
function testSubmission() {
  const testData = {
    timestamp: new Date().toISOString(),
    userName: 'Test User',
    forceName: 'Test Force',
    armyName: 'Test Army List',
    faction: 'Space Marines',
    detachment: 'Battalion',
    mfmVersion: '2024.1',
    pointsValue: '1000',
    notes: 'Test notes',
    armyListText: 'This is a test army list with some sample text to verify the submission works correctly.'
  };
  
  // Simulate a POST request
  const mockEvent = {
    postData: {
      contents: JSON.stringify(testData)
    }
  };
  
  const result = doPost(mockEvent);
  console.log('Test result:', result.getContent());
}